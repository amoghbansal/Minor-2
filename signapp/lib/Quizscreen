import 'dart:async';
import 'dart:math';

import 'package:flutter/material.dart';
import 'package:signapp/moveforward.dart';
void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Quiz App',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: QuizScreen(),
    );
  }
}

class QuizScreen extends StatefulWidget {
  @override
  _QuizScreenState createState() => _QuizScreenState();
}

class _QuizScreenState extends State<QuizScreen> {
  int _currentQuestionIndex = 0;
  int _score = 0;
  List<Map<String, dynamic>> _quizData = [
    {
      'questionGifUrl': 'https://drive.google.com/uc?export=download&id=1ODB7YN499zVAzNszu19HZNx5NNGzfLd5',
      'options': ['C', 'D', 'A', 'B'],
      'correctIndex': 0,
    },
    {
      'questionGifUrl': 'https://drive.google.com/uc?export=download&id=1OEoc899qdBdgSqeqhfhV3rxdLTF3sG7E',
      'options': ['D', 'Z', 'M', 'N'],
      'correctIndex': 0,
    },
    {
      'questionGifUrl': 'https://drive.google.com/uc?export=download&id=1OXTBEORoH0D87UGcIMwbJ5umS09X6QdT',
      'options': ['D', 'E', 'P', 'O'],
      'correctIndex': 1,
    },
    {
      'questionGifUrl': 'https://drive.google.com/uc?export=download&id=1OW9N7vCNG7yz1X18d8mD5oAlfXNTs3d8',
      'options': ['Q', 'R', 'G', 'T'],
      'correctIndex': 2,
    },
    {
      'questionGifUrl': 'https://drive.google.com/uc?export=download&id=1OPb3lixGJJKGoorglWK0LQ8DT9X6mwqt',
      'options': ['W', 'M', 'K', 'O'],
      'correctIndex': 2,
    },
    {
      'questionGifUrl': 'https://drive.google.com/uc?export=download&id=1OMFWCGvnFhBxk3l9pOXgfKmIORuOpojg',
      'options': ['M', 'S', 'T', 'U'],
      'correctIndex': 1,
    },
    // Add more questions here...
  ];

  void _answerQuestion(int selectedOptionIndex) {
    if (selectedOptionIndex == _quizData[_currentQuestionIndex]['correctIndex']) {
      setState(() {
        _score++;
      });
    }
    setState(() {
      if (_currentQuestionIndex < _quizData.length - 1) {
        _currentQuestionIndex++;
      } else {
        // Navigate to result screen when all questions are answered
        Navigator.push(
          context,
          MaterialPageRoute(builder: (context) => ResultScreen(score: _score, totalQuestions: _quizData.length)),
        );
      }
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Quiz'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.stretch,
          children: [
            Text(
              'Question ${_currentQuestionIndex + 1}/${_quizData.length}',
              textAlign: TextAlign.center,
              style: TextStyle(fontSize: 20),
            ),
            SizedBox(height: 20),
            Image.network(
              _quizData[_currentQuestionIndex]['questionGifUrl'],
              height: 200,
              width: 200,
              fit: BoxFit.contain,
            ),
            SizedBox(height: 20),
            ...(_quizData[_currentQuestionIndex]['options'] as List<String>).map((option) {
              return Padding(
                padding: const EdgeInsets.symmetric(vertical: 8.0),
                child: ElevatedButton(
                  onPressed: () => _answerQuestion(_quizData[_currentQuestionIndex]['options'].indexOf(option)),
                  child: Text(option),
                ),
              );
            }).toList(),
          ],
        ),
      ),
    );
  }
}

class ResultScreen extends StatefulWidget {
  final int score;
  final int totalQuestions;

  ResultScreen({required this.score, required this.totalQuestions});

  @override
  _ResultScreenState createState() => _ResultScreenState();
}

class _ResultScreenState extends State<ResultScreen> with TickerProviderStateMixin {
  late AnimationController _controller;
  late Animation<double> _animation;
  Timer? _timer;
  List<Widget> _circles = [];

  @override
  void initState() {
    super.initState();
    _controller = AnimationController(
      vsync: this,
      duration: Duration(seconds: 2),
    );
    _animation = Tween<double>(
      begin: 0,
      end: 1,
    ).animate(_controller);
    _controller.forward();

    _timer = Timer(Duration(seconds: 10), () {
      _controller.dispose();
      _timer?.cancel();
    });

    Future.delayed(Duration(milliseconds: 300), () {
      if (mounted) {
        setState(() {
          _circles.add(Circle());
        });
      }
    });
  }

  @override
  void dispose() {
    _controller.dispose();
    _timer?.cancel();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Result'),
      ),
      body: Stack(
        children: [
          Center(
            child: Column(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                Text(
                  'Your Score: ${widget.score}/${widget.totalQuestions}',
                  style: TextStyle(fontSize: 24),
                ),
                SizedBox(height: 20),
                Row(
                  mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                  children: [
                    ElevatedButton(
                      onPressed: () {
                        // Action for the "Learn" button
                        // Add your functionality here
                      },
                      child: Text('Learn'),
                    ),
                    ElevatedButton(
  onPressed: () {
    Navigator.push(context, MaterialPageRoute(builder: (context) => MoveForward()));
  },
  child: Text('Move Forward'),
),
                  ],
                ),
              ],
            ),
          ),
          AnimatedBuilder(
            animation: _animation,
            builder: (context, child) {
              return Positioned(
                top: -50 + (200 * _animation.value),
                left: Random().nextInt(MediaQuery.of(context).size.width.toInt()).toDouble(),
                child: Icon(
                  Icons.circle,
                  color: Colors.blue,
                  size: 30,
                ),
              );
            },
          ),
          ..._circles,
        ],
      ),
    );
  }
}

class Circle extends StatefulWidget {
  @override
  _CircleState createState() => _CircleState();
}

class _CircleState extends State<Circle> with TickerProviderStateMixin {
  late AnimationController _controller;
  late Animation<double> _animation;

  @override
  void initState() {
    super.initState();
    _controller = AnimationController(
      vsync: this,
      duration: Duration(seconds: 2),
    );
    _animation = Tween<double>(
      begin: -1,
      end: 1,
    ).animate(_controller)
      ..addListener(() {
        setState(() {});
      });
    _controller.forward();
  }

  @override
  void dispose() {
    _controller.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    final size = MediaQuery.of(context).size;
    return Positioned(
      top: _animation.value * size.height,
      left: Random().nextInt(size.width.toInt()).toDouble(),
      child: Icon(
        Icons.circle,
        color: Colors.blue,
        size: 30,
      ),
    );
  }
}
